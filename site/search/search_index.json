{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"features/","title":"Features","text":"<ul> <li>Stacking items</li> <li>Drag and drop items</li> <li>Separation of View and Backend</li> <li>Code that can be attached to custom UI</li> </ul>"},{"location":"features/#todo","title":"TODO","text":"<ul> <li>Persisting data</li> <li>Hotbar and ability to use active item</li> </ul>"},{"location":"installation/","title":"Instructions to Add Package to Unity Project","text":"<ul> <li>In Unity, go to Windows-&gt;Package Manager</li> <li>Click the '+' button on the top left</li> <li>Select \"Add Package from Git URL\"</li> <li>Copy and Paste in <code>https://github.com/yuzhengwen/inventory_system.git</code></li> <li>Click \"Add\"</li> <li>Choose Files to Import</li> <li>Done!</li> </ul>"},{"location":"scripting/","title":"How to use","text":""},{"location":"scripting/#backend","title":"Backend","text":"<p>Add 'Inventory' MonoBehaviour to Game Object. This has the benefit of being able to inspect inventory slots in the editor in runtime. To use, simply get a reference to the inventory object.</p>"},{"location":"scripting/#public-methods","title":"Public Methods","text":"<ul> <li><code>AddItem()</code></li> <li><code>RemoveItem()</code></li> <li><code>GetItems()</code></li> <li><code>FillSpace()</code> </li> <li><code>ClearInventory()</code></li> <li><code>PrintInventory()</code></li> <li><code>IsEmpty()</code></li> <li><code>IsFull()</code></li> </ul>"},{"location":"scripting/#events","title":"Events","text":"<ul> <li><code>OnItemAdded</code></li> <li><code>OnItemRemoved</code></li> </ul>"},{"location":"scripting/#ui","title":"UI","text":"<p>After that, call the <code>AssignInventory()</code> method to assign an inventory backend to display.</p>"},{"location":"scripting/#adding-a-controller","title":"Adding a Controller","text":"<p>The demo 'Collector' class:</p> <pre><code>using InventorySystem;\nusing System;\nusing UnityEngine;\n\n[RequireComponent(typeof(Inventory))]\npublic class Collector : MonoBehaviour\n{\n    private Inventory inventory;\n    [SerializeField] private UI_Inventory uiInventory;\n\n    public event Action&lt;ItemDataSO&gt; OnItemCollected;\n    private void Start()\n    {\n        inventory = GetComponent&lt;Inventory&gt;();\n        uiInventory.AssignInventory(inventory);\n\n    }\n    public void AddCollectibleToInventory(ItemDataSO data)\n    {\n        inventory.AddItem(data, 1);\n        OnItemCollected?.Invoke(data);\n    }\n\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        ICollectible collectible = collision.GetComponent&lt;ICollectible&gt;();\n        collectible?.Collect(this);\n    }\n}\n</code></pre>"}]}