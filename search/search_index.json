{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yuzu Inventory System","text":"<p>A powerful inventory model able to be used with built in or any other UIs Uses event based architecture</p>"},{"location":"features/","title":"Features","text":"<ul> <li>Comes with Item and Collection Systems<ul> <li>Item data easily created in Scriptable Objects</li> <li>Easily create collectibles</li> </ul> </li> <li>Stacking items<ul> <li>Smart management of stack sizes and inventory items</li> </ul> </li> <li>Drag and drop items</li> <li>Allows custom code for item usage</li> <li>Clean Separation of View and Backend<ul> <li>Use built in UI Prefabs or create your own UI</li> </ul> </li> <li>All features compatible between different inventories<ul> <li>E.g. Able to drag and drop between 2 separate inventories</li> </ul> </li> </ul>"},{"location":"installation/","title":"Instructions to Add Package to Unity Project","text":"<ul> <li>In Unity, go to Windows-&gt;Package Manager</li> <li>Click the '+' button on the top left</li> <li>Select \"Add Package from Git URL\"</li> <li>Copy and Paste in <code>https://github.com/yuzhengwen/inventory_system.git</code></li> <li>Click \"Add\"</li> <li>Choose Files to Import</li> <li>Done!</li> </ul>"},{"location":"scripting/","title":"How to use","text":""},{"location":"scripting/#backend","title":"Backend","text":"<p>Add 'Inventory' MonoBehaviour to Game Object. This has the benefit of being able to inspect inventory slots in the editor in runtime. To use, simply get a reference to the inventory object.</p>"},{"location":"scripting/#public-methods","title":"Public Methods","text":"<ul> <li><code>AddItem()</code></li> <li><code>RemoveItem()</code></li> <li><code>GetItems()</code></li> <li><code>FillSpace()</code> </li> <li><code>ClearInventory()</code></li> <li><code>PrintInventory()</code></li> <li><code>IsEmpty()</code></li> <li><code>IsFull()</code></li> </ul>"},{"location":"scripting/#events","title":"Events","text":"<ul> <li><code>OnItemAdded</code></li> <li><code>OnItemRemoved</code></li> <li><code>OnItemUsed</code></li> </ul> <p>Each event will pass in the <code>InventorySlot</code> object, which contains info about stack size, item data, custom behaviour objects.</p> <p>Since <code>InventorySlot</code> objects are passed by reference. Changing the object will directly modify the actual inventory</p>"},{"location":"scripting/#ui","title":"UI","text":""},{"location":"scripting/#adding-a-controller","title":"Adding a Controller","text":"<p>The Inventory Controller helps bridge the gap between Inventory Model and UI A single inventory can have multiple UI objects showing the inventory Items added to inventory can be controlled - Possible to add filters so that inventory only accept some items</p>"}]}